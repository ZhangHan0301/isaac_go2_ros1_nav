from sympy import shape
import torch


ray_data_w = torch.Tensor([[[-1.6258e-01,  1.5969e+00,  0.0000e+00],
         [ 7.9344e-01,  1.3036e+00,  2.0000e+00],
         [ 1.7495e+00,  1.0103e+00,  1.1900e+00]],
                           
         [[-1.6258e-01,  1.5969e+00,  0.0000e+00],
         [ 7.9344e-01,  1.3036e+00,  0.0000e+00],
         [ 1.0,  1.0,  0.1900e+00]]])

# ray_data_w = torch.tensor([[[ 1.4830,  1.0250,  0.8008],
#          [ 0.9831,  1.0166,  0.7904],
#          [ 0.4831,  1.0083,  0.8980],
#          [-0.0168,  0.9999,  0.6657],
#          [-0.5167,  0.9915,  0.7710],
#          [-1.0166,  0.9831,  0.6967],
#          [-1.5166,  0.9747,  0.6482],
#          [ 1.4914,  0.5251,  0.8056],
#          [ 0.9915,  0.5167,  0.6414],
#          [ 0.4915,  0.5083,  0.6414],
#          [-0.0084,  0.4999,  0.6414],
#          [-0.5083,  0.4915,  0.6414],
#          [-1.0083,  0.4831,  0.8738],
#          [-1.5082,  0.4747,  0.7638],
#          [ 1.4998,  0.0252,  0.9353],
#          [ 0.9999,  0.0168,  0.6414],
#          [ 0.4999,  0.0084,  0.6414],
#          [ 0.0000,  0.0000,  0.6414],
#          [-0.4999, -0.0084,  0.6414],
#          [-0.9999, -0.0168,  0.7773],
#          [-1.4998, -0.0252,  0.8744],
#          [ 1.5082, -0.4747,  0.7906],
#          [ 1.0083, -0.4831,  0.9663],
#          [ 0.5083, -0.4915,  0.6414],
#          [ 0.0084, -0.4999,  0.6414],
#          [-0.4915, -0.5083,  0.6414],
#          [-0.9915, -0.5167,  0.6414],
#          [-1.4914, -0.5251,  0.6924],
#          [ 1.5166, -0.9747,  0.8422],
#          [ 1.0166, -0.9831,  0.6892],
#          [ 0.5167, -0.9915,  0.6414],
#          [ 0.0168, -0.9999,  0.6414],
#          [-0.4831, -1.0083,  0.6414],
#          [-0.9831, -1.0166,  0.6414],
#          [-1.4830, -1.0250,  0.7660]],

#         [[ 1.5242,  0.9627,  0.6335],
#          [ 1.0244,  0.9750,  0.6453],
#          [ 0.5245,  0.9874,  0.6453],
#          [ 0.0247,  0.9997,  0.6453],
#          [-0.4752,  1.0120,  0.6453],
#          [-0.9750,  1.0244,  0.6453],
#          [-1.4749,  1.0367,  0.6352],
#          [ 1.5119,  0.4629,  0.6441],
#          [ 1.0120,  0.4752,  0.6453],
#          [ 0.5122,  0.4875,  0.6453],
#          [ 0.0123,  0.4998,  0.6453],
#          [-0.4875,  0.5122,  0.6453],
#          [-0.9874,  0.5245,  0.6453],
#          [-1.4872,  0.5368,  0.6446],
#          [ 1.4995, -0.0370,  0.6453],
#          [ 0.9997, -0.0247,  0.6453],
#          [ 0.4998, -0.0123,  0.6453],
#          [ 0.0000,  0.0000,  0.6453],
#          [-0.4998,  0.0123,  0.6453],
#          [-0.9997,  0.0247,  0.6453],
#          [-1.4995,  0.0370,  0.6453],
#          [ 1.4872, -0.5368,  0.6437],
#          [ 0.9874, -0.5245,  0.6453],
#          [ 0.4875, -0.5122,  0.6453],
#          [-0.0123, -0.4998,  0.6453],
#          [-0.5122, -0.4875,  0.6453],
#          [-1.0120, -0.4752,  0.6453],
#          [-1.5119, -0.4629,  0.6453],
#          [ 1.4749, -1.0367,  0.6343],
#          [ 0.9750, -1.0244,  0.6453],
#          [ 0.4752, -1.0120,  0.6453],
#          [-0.0247, -0.9997,  0.6453],
#          [-0.5245, -0.9874,  0.6453],
#          [-1.0244, -0.9750,  0.6453],
#          [-1.5242, -0.9627,  0.6347]]])

def obstacle_reward(
                    z_threshold: float = 0.3,
                    d_safe : float = 0.5) -> torch.Tensor:
    """Height scan from the given sensor w.r.t. the sensor's frame.

    The provided offset (Defaults to 0.5) is subtracted from the returned values.
    """
    # 过滤低矮障碍物 
    # obstacles = ray_data_w[ray_data_w[:,:,2]>z_threshold]
    # 创建三维布尔掩码（保留原始维度）
    rewards = []
    # 遍历每个样本（无需显式使用range索引）
    for sample in ray_data_w:
        # 步骤1: 直接筛选z坐标符合条件的点（向量化筛选）
        obstacle = sample[sample[..., 2] > z_threshold]
        
        # 步骤2: 判断是否存在有效障碍物
        if obstacle.numel() == 0:
            rewards.append(0.0)
            continue
        
        # 步骤3: 计算XY平面距离（向量化计算）
        dists = torch.norm(obstacle[:, :2], dim=-1)
        
        # 步骤4: 计算避障惩罚（向量化clamp和sum）
        penalty = torch.clamp(d_safe - dists, min=0).sum()
        rewards.append(penalty.item())  # 避免保留梯度提升内存效率

    # 转换为Tensor（若需要）
    rewards = torch.tensor(rewards)
    
    print("obstacles reward ", rewards)
    print(torch.tensor(rewards))


    
    return rewards

obstacle_reward(z_threshold= 0.5, d_safe=3.0)

# print(ray_hits_w.shape)

# pos_w = torch.Tensor([[0.0221, 0.4943, 0.3932]])

# quat_w = torch.Tensor([[ 0.9868,  0.0144,  0.0631, -0.1483]])

# local = convert_ray_hits_to_robot_frame(ray_hits_w, pos_w, quat_w)
# print("local ",local)


